Description: Main stack

Parameters:
  DeployEnv:
    Type: String
    AllowedValues:
      - test
      - stage
      - production

  LambdaFunctionName:
    Type: String
    MinLength: 1 # required

  LambdaCodeS3BucketName:
    Type: String
    MinLength: 1 # required

Resources:
  TestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  TestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Ref: LambdaFunctionName
      Handler: index.handler
      Role: !GetAtt TestLambdaRole.Arn
      Runtime: nodejs10.x
      Code:
        S3Bucket:
          Ref: LambdaCodeS3BucketName
        S3Key: test-lambda.zip

  TestLambdaApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: test-lambda-api-endpoint
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - EDGE

  TestLambdaApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: TestLambdaApiMethod1
    Properties:
      RestApiId: !Ref TestLambdaApi

  TestLambdaApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TestLambdaApi
      ParentId: !GetAtt TestLambdaApi.RootResourceId
      PathPart: lambda

  TestLambdaApiMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TestLambdaApi
      ResourceId: !Ref TestLambdaApiProxyResource
      AuthorizationType: NONE # https://docs.aws.amazon.com/apigateway/api-reference/resource/method/#authorizationType
      ApiKeyRequired: false
      HttpMethod: ANY
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt TestLambdaInvocationRole.Arn
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY # https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#type
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestLambdaFunction.Arn}/invocations"

  TestLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TestLambdaFunction.Arn

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref TestLambdaApi
      Schema: {}

  TestLambdaApiStage:
    DependsOn: TestLambdaApiDeployment
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TestLambdaApi
      DeploymentId: !Ref TestLambdaApiDeployment
      StageName: test

Outputs:
  Api:
    Value: !Ref TestLambdaApi
