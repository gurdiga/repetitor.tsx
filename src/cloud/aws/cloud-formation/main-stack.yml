Description: Main stack

Parameters:
  DeployEnv: {Type: String, AllowedValues: [test, stage, production]}
  LambdaFunctionName: {Type: String, MinLength: 1}
  LambdaCodeS3BucketName: {Type: String, MinLength: 1}
  LambdaCodeZipName: {Type: String, MinLength: 1}
  DBName: {Type: String, MinLength: 1}
  DBUser: {Type: String, MinLength: 1}
  DBPassword: {Type: String, MinLength: 1, NoEcho: true}
  DefaultSubnetIds: {Type: "List<AWS::EC2::Subnet::Id>"}
  DefaultSecurityGroupIds: {Type: "List<AWS::EC2::SecurityGroup::Id>"}

Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The DBSubnetGroup
      SubnetIds: !Ref DefaultSubnetIds

  DB:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Retain
    Properties:
      DBClusterIdentifier: !Ref DBName
      DatabaseName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      Engine: aurora
      EngineMode: serverless
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: true

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal: {Service: lambda.amazonaws.com}

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs10.x
      Code:
        S3Bucket: !Ref LambdaCodeS3BucketName
        S3Key: !Ref LambdaCodeZipName
      Timeout: 30 # seconds
      TracingConfig: {Mode: Active}
      VpcConfig:
        SecurityGroupIds: !Ref DefaultSecurityGroupIds
        SubnetIds: !Ref DefaultSubnetIds
      Environment:
        Variables:
          APP_DB_HOST: !GetAtt DB.Endpoint.Address
          APP_DB_NAME: !Ref DBName
          APP_DB_USER: !Ref DBUser
          APP_DB_PASSWORD: !Ref DBPassword
          NODE_PATH: ./ # So that Node is able to find modules; related to baseUrl in tsconfig.

  LambdaApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: lambda-api-endpoint
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types: [REGIONAL]

  LambdaApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: LambdaApiMethod1
    Properties:
      RestApiId: !Ref LambdaApi

  LambdaApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LambdaApi
      ParentId: !GetAtt LambdaApi.RootResourceId
      PathPart: "{proxy+}"

  LambdaApiMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LambdaApi
      ResourceId: !Ref LambdaApiProxyResource
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt LambdaInvocationRole.Arn
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"

  LambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: apigateway.amazonaws.com}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt LambdaFunction.Arn

  LambdaApiStage:
    DependsOn: LambdaApiDeployment
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref LambdaApi
      DeploymentId: !Ref LambdaApiDeployment
      StageName: test

Outputs:
  Api:
    Value: !Ref LambdaApi
