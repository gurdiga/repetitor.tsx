Description: Main stack

Parameters:
  DeployEnv: {Type: String, AllowedValues: ["test", "stage", "production"]}
  LambdaFunctionName: {Type: String, MinLength: 1}
  LambdaCodeS3BucketName: {Type: String, MinLength: 1}
  LambdaCodeZipName: {Type: String, MinLength: 1}
  SubnetIds: {Type: String, MinLength: 1}
  SecurityGroupIds: {Type: String, MinLength: 1}
  DBEndpoint: {Type: String, MinLength: 1}
  DBPort: {Type: Number}
  DBName: {Type: String, MinLength: 1}
  DBUser: {Type: String, MinLength: 1}
  DBPassword: {Type: String, MinLength: 1, NoEcho: true}

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: !Sub '${AWS::Region}b'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The DBSubnetGroup
      SubnetIds: [!Ref Subnet1, !Ref Subnet2]

  DB:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Retain
    Properties:
      DatabaseName: {Ref: DBName}
      MasterUsername: {Ref: DBUser}
      MasterUserPassword: {Ref: DBPassword}
      Engine: aurora
      EngineMode: serverless
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: true
      EnableHttpEndpoint: true

  TestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal: {Service: lambda.amazonaws.com}

  TestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: {Ref: LambdaFunctionName}
      Handler: index.handler
      Role: !GetAtt TestLambdaRole.Arn
      Runtime: nodejs10.x
      Code:
        S3Bucket: {Ref: LambdaCodeS3BucketName}
        S3Key: {Ref: LambdaCodeZipName}
      Environment:
        Variables:
          ENDPOINT: {Ref: DBEndpoint}
          PORT: {Ref: DBPort}
          DATABASE: {Ref: DBName}
          DBUSER: {Ref: DBUser}
          DBPASSWORD: {Ref: DBPassword}

  TestLambdaApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: test-lambda-api-endpoint
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types: [EDGE]

  TestLambdaApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: TestLambdaApiMethod1
    Properties:
      RestApiId: !Ref TestLambdaApi

  TestLambdaApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TestLambdaApi
      ParentId: !GetAtt TestLambdaApi.RootResourceId
      PathPart: "{proxy+}"

  TestLambdaApiMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TestLambdaApi
      ResourceId: !Ref TestLambdaApiProxyResource
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt TestLambdaInvocationRole.Arn
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestLambdaFunction.Arn}/invocations"

  TestLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: apigateway.amazonaws.com}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TestLambdaFunction.Arn

  TestLambdaApiStage:
    DependsOn: TestLambdaApiDeployment
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TestLambdaApi
      DeploymentId: !Ref TestLambdaApiDeployment
      StageName: test

Outputs:
  Api:
    Value: !Ref TestLambdaApi
